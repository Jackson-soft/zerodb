// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proxy.proto

package proxy

import (
	context "context"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	basic "git.2dfire.net/zerodb/common/zeroproto/pkg/basic"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type VersionResponse struct {
	BasicResp            *basic.BasicResponse `protobuf:"bytes,1,opt,name=basicResp,proto3" json:"basicResp,omitempty"`
	CurVersion           string               `protobuf:"bytes,2,opt,name=curVersion,proto3" json:"curVersion,omitempty"`
	BackVersion          string               `protobuf:"bytes,3,opt,name=backVersion,proto3" json:"backVersion,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *VersionResponse) Reset()         { *m = VersionResponse{} }
func (m *VersionResponse) String() string { return proto.CompactTextString(m) }
func (*VersionResponse) ProtoMessage()    {}
func (*VersionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_700b50b08ed8dbaf, []int{0}
}
func (m *VersionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VersionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VersionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VersionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VersionResponse.Merge(m, src)
}
func (m *VersionResponse) XXX_Size() int {
	return m.Size()
}
func (m *VersionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VersionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VersionResponse proto.InternalMessageInfo

func (m *VersionResponse) GetBasicResp() *basic.BasicResponse {
	if m != nil {
		return m.BasicResp
	}
	return nil
}

func (m *VersionResponse) GetCurVersion() string {
	if m != nil {
		return m.CurVersion
	}
	return ""
}

func (m *VersionResponse) GetBackVersion() string {
	if m != nil {
		return m.BackVersion
	}
	return ""
}

type StopWriteRequest struct {
	Hostgroup            string   `protobuf:"bytes,1,opt,name=hostgroup,proto3" json:"hostgroup,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StopWriteRequest) Reset()         { *m = StopWriteRequest{} }
func (m *StopWriteRequest) String() string { return proto.CompactTextString(m) }
func (*StopWriteRequest) ProtoMessage()    {}
func (*StopWriteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_700b50b08ed8dbaf, []int{1}
}
func (m *StopWriteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StopWriteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StopWriteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StopWriteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopWriteRequest.Merge(m, src)
}
func (m *StopWriteRequest) XXX_Size() int {
	return m.Size()
}
func (m *StopWriteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StopWriteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StopWriteRequest proto.InternalMessageInfo

func (m *StopWriteRequest) GetHostgroup() string {
	if m != nil {
		return m.Hostgroup
	}
	return ""
}

type RecoverWriteRequest struct {
	Hostgroup            string   `protobuf:"bytes,1,opt,name=hostgroup,proto3" json:"hostgroup,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RecoverWriteRequest) Reset()         { *m = RecoverWriteRequest{} }
func (m *RecoverWriteRequest) String() string { return proto.CompactTextString(m) }
func (*RecoverWriteRequest) ProtoMessage()    {}
func (*RecoverWriteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_700b50b08ed8dbaf, []int{2}
}
func (m *RecoverWriteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecoverWriteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecoverWriteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecoverWriteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecoverWriteRequest.Merge(m, src)
}
func (m *RecoverWriteRequest) XXX_Size() int {
	return m.Size()
}
func (m *RecoverWriteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RecoverWriteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RecoverWriteRequest proto.InternalMessageInfo

func (m *RecoverWriteRequest) GetHostgroup() string {
	if m != nil {
		return m.Hostgroup
	}
	return ""
}

type PushConfigRequest struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Version              string   `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PushConfigRequest) Reset()         { *m = PushConfigRequest{} }
func (m *PushConfigRequest) String() string { return proto.CompactTextString(m) }
func (*PushConfigRequest) ProtoMessage()    {}
func (*PushConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_700b50b08ed8dbaf, []int{3}
}
func (m *PushConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushConfigRequest.Merge(m, src)
}
func (m *PushConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *PushConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PushConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PushConfigRequest proto.InternalMessageInfo

func (m *PushConfigRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *PushConfigRequest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type GetVoteResponse struct {
	BasicResp            *basic.BasicResponse `protobuf:"bytes,1,opt,name=basicResp,proto3" json:"basicResp,omitempty"`
	From                 int32                `protobuf:"varint,2,opt,name=from,proto3" json:"from,omitempty"`
	Vote                 bool                 `protobuf:"varint,3,opt,name=vote,proto3" json:"vote,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *GetVoteResponse) Reset()         { *m = GetVoteResponse{} }
func (m *GetVoteResponse) String() string { return proto.CompactTextString(m) }
func (*GetVoteResponse) ProtoMessage()    {}
func (*GetVoteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_700b50b08ed8dbaf, []int{4}
}
func (m *GetVoteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetVoteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetVoteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetVoteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetVoteResponse.Merge(m, src)
}
func (m *GetVoteResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetVoteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetVoteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetVoteResponse proto.InternalMessageInfo

func (m *GetVoteResponse) GetBasicResp() *basic.BasicResponse {
	if m != nil {
		return m.BasicResp
	}
	return nil
}

func (m *GetVoteResponse) GetFrom() int32 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *GetVoteResponse) GetVote() bool {
	if m != nil {
		return m.Vote
	}
	return false
}

type GetVoteRequest struct {
	Hostgroup            string   `protobuf:"bytes,1,opt,name=hostgroup,proto3" json:"hostgroup,omitempty"`
	From                 int32    `protobuf:"varint,2,opt,name=from,proto3" json:"from,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetVoteRequest) Reset()         { *m = GetVoteRequest{} }
func (m *GetVoteRequest) String() string { return proto.CompactTextString(m) }
func (*GetVoteRequest) ProtoMessage()    {}
func (*GetVoteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_700b50b08ed8dbaf, []int{5}
}
func (m *GetVoteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetVoteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetVoteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetVoteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetVoteRequest.Merge(m, src)
}
func (m *GetVoteRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetVoteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetVoteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetVoteRequest proto.InternalMessageInfo

func (m *GetVoteRequest) GetHostgroup() string {
	if m != nil {
		return m.Hostgroup
	}
	return ""
}

func (m *GetVoteRequest) GetFrom() int32 {
	if m != nil {
		return m.From
	}
	return 0
}

type SwitchDatasourceRequest struct {
	Hostgroup            string   `protobuf:"bytes,1,opt,name=hostgroup,proto3" json:"hostgroup,omitempty"`
	From                 int32    `protobuf:"varint,2,opt,name=from,proto3" json:"from,omitempty"`
	To                   int32    `protobuf:"varint,3,opt,name=to,proto3" json:"to,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SwitchDatasourceRequest) Reset()         { *m = SwitchDatasourceRequest{} }
func (m *SwitchDatasourceRequest) String() string { return proto.CompactTextString(m) }
func (*SwitchDatasourceRequest) ProtoMessage()    {}
func (*SwitchDatasourceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_700b50b08ed8dbaf, []int{6}
}
func (m *SwitchDatasourceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SwitchDatasourceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SwitchDatasourceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SwitchDatasourceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SwitchDatasourceRequest.Merge(m, src)
}
func (m *SwitchDatasourceRequest) XXX_Size() int {
	return m.Size()
}
func (m *SwitchDatasourceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SwitchDatasourceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SwitchDatasourceRequest proto.InternalMessageInfo

func (m *SwitchDatasourceRequest) GetHostgroup() string {
	if m != nil {
		return m.Hostgroup
	}
	return ""
}

func (m *SwitchDatasourceRequest) GetFrom() int32 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *SwitchDatasourceRequest) GetTo() int32 {
	if m != nil {
		return m.To
	}
	return 0
}

type SwitchDatasourceResponse struct {
	BasicResp            *basic.BasicResponse `protobuf:"bytes,1,opt,name=basicResp,proto3" json:"basicResp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *SwitchDatasourceResponse) Reset()         { *m = SwitchDatasourceResponse{} }
func (m *SwitchDatasourceResponse) String() string { return proto.CompactTextString(m) }
func (*SwitchDatasourceResponse) ProtoMessage()    {}
func (*SwitchDatasourceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_700b50b08ed8dbaf, []int{7}
}
func (m *SwitchDatasourceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SwitchDatasourceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SwitchDatasourceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SwitchDatasourceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SwitchDatasourceResponse.Merge(m, src)
}
func (m *SwitchDatasourceResponse) XXX_Size() int {
	return m.Size()
}
func (m *SwitchDatasourceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SwitchDatasourceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SwitchDatasourceResponse proto.InternalMessageInfo

func (m *SwitchDatasourceResponse) GetBasicResp() *basic.BasicResponse {
	if m != nil {
		return m.BasicResp
	}
	return nil
}

type AddHostGroupRequest struct {
	HostGroupCfgData     []byte   `protobuf:"bytes,1,opt,name=hostGroupCfgData,proto3" json:"hostGroupCfgData,omitempty"`
	Version              string   `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddHostGroupRequest) Reset()         { *m = AddHostGroupRequest{} }
func (m *AddHostGroupRequest) String() string { return proto.CompactTextString(m) }
func (*AddHostGroupRequest) ProtoMessage()    {}
func (*AddHostGroupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_700b50b08ed8dbaf, []int{8}
}
func (m *AddHostGroupRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddHostGroupRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddHostGroupRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddHostGroupRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddHostGroupRequest.Merge(m, src)
}
func (m *AddHostGroupRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddHostGroupRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddHostGroupRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddHostGroupRequest proto.InternalMessageInfo

func (m *AddHostGroupRequest) GetHostGroupCfgData() []byte {
	if m != nil {
		return m.HostGroupCfgData
	}
	return nil
}

func (m *AddHostGroupRequest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type DeleteHostGroupRequest struct {
	HostGroupName        string   `protobuf:"bytes,1,opt,name=hostGroupName,proto3" json:"hostGroupName,omitempty"`
	Version              string   `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteHostGroupRequest) Reset()         { *m = DeleteHostGroupRequest{} }
func (m *DeleteHostGroupRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteHostGroupRequest) ProtoMessage()    {}
func (*DeleteHostGroupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_700b50b08ed8dbaf, []int{9}
}
func (m *DeleteHostGroupRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteHostGroupRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteHostGroupRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteHostGroupRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteHostGroupRequest.Merge(m, src)
}
func (m *DeleteHostGroupRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteHostGroupRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteHostGroupRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteHostGroupRequest proto.InternalMessageInfo

func (m *DeleteHostGroupRequest) GetHostGroupName() string {
	if m != nil {
		return m.HostGroupName
	}
	return ""
}

func (m *DeleteHostGroupRequest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type AddSchemaRequest struct {
	SchemaCfgData        []byte   `protobuf:"bytes,1,opt,name=schemaCfgData,proto3" json:"schemaCfgData,omitempty"`
	Version              string   `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddSchemaRequest) Reset()         { *m = AddSchemaRequest{} }
func (m *AddSchemaRequest) String() string { return proto.CompactTextString(m) }
func (*AddSchemaRequest) ProtoMessage()    {}
func (*AddSchemaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_700b50b08ed8dbaf, []int{10}
}
func (m *AddSchemaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddSchemaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddSchemaRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddSchemaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddSchemaRequest.Merge(m, src)
}
func (m *AddSchemaRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddSchemaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddSchemaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddSchemaRequest proto.InternalMessageInfo

func (m *AddSchemaRequest) GetSchemaCfgData() []byte {
	if m != nil {
		return m.SchemaCfgData
	}
	return nil
}

func (m *AddSchemaRequest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type DeleteSchemaRequest struct {
	SchemaName           string   `protobuf:"bytes,1,opt,name=schemaName,proto3" json:"schemaName,omitempty"`
	Version              string   `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteSchemaRequest) Reset()         { *m = DeleteSchemaRequest{} }
func (m *DeleteSchemaRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteSchemaRequest) ProtoMessage()    {}
func (*DeleteSchemaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_700b50b08ed8dbaf, []int{11}
}
func (m *DeleteSchemaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteSchemaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteSchemaRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteSchemaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteSchemaRequest.Merge(m, src)
}
func (m *DeleteSchemaRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteSchemaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteSchemaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteSchemaRequest proto.InternalMessageInfo

func (m *DeleteSchemaRequest) GetSchemaName() string {
	if m != nil {
		return m.SchemaName
	}
	return ""
}

func (m *DeleteSchemaRequest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type AddTableRequest struct {
	TableCfgData         []byte   `protobuf:"bytes,1,opt,name=tableCfgData,proto3" json:"tableCfgData,omitempty"`
	SchemaName           string   `protobuf:"bytes,2,opt,name=schemaName,proto3" json:"schemaName,omitempty"`
	Version              string   `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddTableRequest) Reset()         { *m = AddTableRequest{} }
func (m *AddTableRequest) String() string { return proto.CompactTextString(m) }
func (*AddTableRequest) ProtoMessage()    {}
func (*AddTableRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_700b50b08ed8dbaf, []int{12}
}
func (m *AddTableRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddTableRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddTableRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddTableRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddTableRequest.Merge(m, src)
}
func (m *AddTableRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddTableRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddTableRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddTableRequest proto.InternalMessageInfo

func (m *AddTableRequest) GetTableCfgData() []byte {
	if m != nil {
		return m.TableCfgData
	}
	return nil
}

func (m *AddTableRequest) GetSchemaName() string {
	if m != nil {
		return m.SchemaName
	}
	return ""
}

func (m *AddTableRequest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type DeleteTableRequest struct {
	TableName            string   `protobuf:"bytes,1,opt,name=tableName,proto3" json:"tableName,omitempty"`
	SchemaName           string   `protobuf:"bytes,2,opt,name=schemaName,proto3" json:"schemaName,omitempty"`
	Version              string   `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteTableRequest) Reset()         { *m = DeleteTableRequest{} }
func (m *DeleteTableRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteTableRequest) ProtoMessage()    {}
func (*DeleteTableRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_700b50b08ed8dbaf, []int{13}
}
func (m *DeleteTableRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteTableRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteTableRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteTableRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteTableRequest.Merge(m, src)
}
func (m *DeleteTableRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteTableRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteTableRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteTableRequest proto.InternalMessageInfo

func (m *DeleteTableRequest) GetTableName() string {
	if m != nil {
		return m.TableName
	}
	return ""
}

func (m *DeleteTableRequest) GetSchemaName() string {
	if m != nil {
		return m.SchemaName
	}
	return ""
}

func (m *DeleteTableRequest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type UpdateSchemaRWSplitRequest struct {
	SchemaName           string   `protobuf:"bytes,1,opt,name=schemaName,proto3" json:"schemaName,omitempty"`
	RwSplit              bool     `protobuf:"varint,2,opt,name=rwSplit,proto3" json:"rwSplit,omitempty"`
	Version              string   `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateSchemaRWSplitRequest) Reset()         { *m = UpdateSchemaRWSplitRequest{} }
func (m *UpdateSchemaRWSplitRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateSchemaRWSplitRequest) ProtoMessage()    {}
func (*UpdateSchemaRWSplitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_700b50b08ed8dbaf, []int{14}
}
func (m *UpdateSchemaRWSplitRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateSchemaRWSplitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateSchemaRWSplitRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateSchemaRWSplitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateSchemaRWSplitRequest.Merge(m, src)
}
func (m *UpdateSchemaRWSplitRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateSchemaRWSplitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateSchemaRWSplitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateSchemaRWSplitRequest proto.InternalMessageInfo

func (m *UpdateSchemaRWSplitRequest) GetSchemaName() string {
	if m != nil {
		return m.SchemaName
	}
	return ""
}

func (m *UpdateSchemaRWSplitRequest) GetRwSplit() bool {
	if m != nil {
		return m.RwSplit
	}
	return false
}

func (m *UpdateSchemaRWSplitRequest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type UpdateStopServiceRequest struct {
	StopServiceData      []byte   `protobuf:"bytes,1,opt,name=stopServiceData,proto3" json:"stopServiceData,omitempty"`
	Version              string   `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateStopServiceRequest) Reset()         { *m = UpdateStopServiceRequest{} }
func (m *UpdateStopServiceRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateStopServiceRequest) ProtoMessage()    {}
func (*UpdateStopServiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_700b50b08ed8dbaf, []int{15}
}
func (m *UpdateStopServiceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateStopServiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateStopServiceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateStopServiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateStopServiceRequest.Merge(m, src)
}
func (m *UpdateStopServiceRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateStopServiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateStopServiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateStopServiceRequest proto.InternalMessageInfo

func (m *UpdateStopServiceRequest) GetStopServiceData() []byte {
	if m != nil {
		return m.StopServiceData
	}
	return nil
}

func (m *UpdateStopServiceRequest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type UpdateSwitchRequest struct {
	SwitchData           []byte   `protobuf:"bytes,1,opt,name=switchData,proto3" json:"switchData,omitempty"`
	Version              string   `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateSwitchRequest) Reset()         { *m = UpdateSwitchRequest{} }
func (m *UpdateSwitchRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateSwitchRequest) ProtoMessage()    {}
func (*UpdateSwitchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_700b50b08ed8dbaf, []int{16}
}
func (m *UpdateSwitchRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateSwitchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateSwitchRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateSwitchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateSwitchRequest.Merge(m, src)
}
func (m *UpdateSwitchRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateSwitchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateSwitchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateSwitchRequest proto.InternalMessageInfo

func (m *UpdateSwitchRequest) GetSwitchData() []byte {
	if m != nil {
		return m.SwitchData
	}
	return nil
}

func (m *UpdateSwitchRequest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type UpdateBasicRequest struct {
	BasicData            []byte   `protobuf:"bytes,1,opt,name=basicData,proto3" json:"basicData,omitempty"`
	Version              string   `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateBasicRequest) Reset()         { *m = UpdateBasicRequest{} }
func (m *UpdateBasicRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateBasicRequest) ProtoMessage()    {}
func (*UpdateBasicRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_700b50b08ed8dbaf, []int{17}
}
func (m *UpdateBasicRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateBasicRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateBasicRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateBasicRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateBasicRequest.Merge(m, src)
}
func (m *UpdateBasicRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateBasicRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateBasicRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateBasicRequest proto.InternalMessageInfo

func (m *UpdateBasicRequest) GetBasicData() []byte {
	if m != nil {
		return m.BasicData
	}
	return nil
}

func (m *UpdateBasicRequest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type AddHostGroupClusterRequest struct {
	HostGroupClusterCfgData []byte   `protobuf:"bytes,1,opt,name=hostGroupClusterCfgData,proto3" json:"hostGroupClusterCfgData,omitempty"`
	Version                 string   `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral    struct{} `json:"-"`
	XXX_unrecognized        []byte   `json:"-"`
	XXX_sizecache           int32    `json:"-"`
}

func (m *AddHostGroupClusterRequest) Reset()         { *m = AddHostGroupClusterRequest{} }
func (m *AddHostGroupClusterRequest) String() string { return proto.CompactTextString(m) }
func (*AddHostGroupClusterRequest) ProtoMessage()    {}
func (*AddHostGroupClusterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_700b50b08ed8dbaf, []int{18}
}
func (m *AddHostGroupClusterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddHostGroupClusterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddHostGroupClusterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddHostGroupClusterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddHostGroupClusterRequest.Merge(m, src)
}
func (m *AddHostGroupClusterRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddHostGroupClusterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddHostGroupClusterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddHostGroupClusterRequest proto.InternalMessageInfo

func (m *AddHostGroupClusterRequest) GetHostGroupClusterCfgData() []byte {
	if m != nil {
		return m.HostGroupClusterCfgData
	}
	return nil
}

func (m *AddHostGroupClusterRequest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type UpdateHostGroupClusterRequest struct {
	HostGroupClusterCfgData []byte   `protobuf:"bytes,1,opt,name=hostGroupClusterCfgData,proto3" json:"hostGroupClusterCfgData,omitempty"`
	Version                 string   `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral    struct{} `json:"-"`
	XXX_unrecognized        []byte   `json:"-"`
	XXX_sizecache           int32    `json:"-"`
}

func (m *UpdateHostGroupClusterRequest) Reset()         { *m = UpdateHostGroupClusterRequest{} }
func (m *UpdateHostGroupClusterRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateHostGroupClusterRequest) ProtoMessage()    {}
func (*UpdateHostGroupClusterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_700b50b08ed8dbaf, []int{19}
}
func (m *UpdateHostGroupClusterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateHostGroupClusterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateHostGroupClusterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateHostGroupClusterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateHostGroupClusterRequest.Merge(m, src)
}
func (m *UpdateHostGroupClusterRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateHostGroupClusterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateHostGroupClusterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateHostGroupClusterRequest proto.InternalMessageInfo

func (m *UpdateHostGroupClusterRequest) GetHostGroupClusterCfgData() []byte {
	if m != nil {
		return m.HostGroupClusterCfgData
	}
	return nil
}

func (m *UpdateHostGroupClusterRequest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type DeleteHostGroupClusterRequest struct {
	HostGroupClusterName string   `protobuf:"bytes,1,opt,name=hostGroupClusterName,proto3" json:"hostGroupClusterName,omitempty"`
	Version              string   `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteHostGroupClusterRequest) Reset()         { *m = DeleteHostGroupClusterRequest{} }
func (m *DeleteHostGroupClusterRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteHostGroupClusterRequest) ProtoMessage()    {}
func (*DeleteHostGroupClusterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_700b50b08ed8dbaf, []int{20}
}
func (m *DeleteHostGroupClusterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteHostGroupClusterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteHostGroupClusterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteHostGroupClusterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteHostGroupClusterRequest.Merge(m, src)
}
func (m *DeleteHostGroupClusterRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteHostGroupClusterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteHostGroupClusterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteHostGroupClusterRequest proto.InternalMessageInfo

func (m *DeleteHostGroupClusterRequest) GetHostGroupClusterName() string {
	if m != nil {
		return m.HostGroupClusterName
	}
	return ""
}

func (m *DeleteHostGroupClusterRequest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func init() {
	proto.RegisterType((*VersionResponse)(nil), "proxy.VersionResponse")
	proto.RegisterType((*StopWriteRequest)(nil), "proxy.StopWriteRequest")
	proto.RegisterType((*RecoverWriteRequest)(nil), "proxy.RecoverWriteRequest")
	proto.RegisterType((*PushConfigRequest)(nil), "proxy.PushConfigRequest")
	proto.RegisterType((*GetVoteResponse)(nil), "proxy.GetVoteResponse")
	proto.RegisterType((*GetVoteRequest)(nil), "proxy.GetVoteRequest")
	proto.RegisterType((*SwitchDatasourceRequest)(nil), "proxy.SwitchDatasourceRequest")
	proto.RegisterType((*SwitchDatasourceResponse)(nil), "proxy.SwitchDatasourceResponse")
	proto.RegisterType((*AddHostGroupRequest)(nil), "proxy.AddHostGroupRequest")
	proto.RegisterType((*DeleteHostGroupRequest)(nil), "proxy.DeleteHostGroupRequest")
	proto.RegisterType((*AddSchemaRequest)(nil), "proxy.AddSchemaRequest")
	proto.RegisterType((*DeleteSchemaRequest)(nil), "proxy.DeleteSchemaRequest")
	proto.RegisterType((*AddTableRequest)(nil), "proxy.AddTableRequest")
	proto.RegisterType((*DeleteTableRequest)(nil), "proxy.DeleteTableRequest")
	proto.RegisterType((*UpdateSchemaRWSplitRequest)(nil), "proxy.UpdateSchemaRWSplitRequest")
	proto.RegisterType((*UpdateStopServiceRequest)(nil), "proxy.UpdateStopServiceRequest")
	proto.RegisterType((*UpdateSwitchRequest)(nil), "proxy.UpdateSwitchRequest")
	proto.RegisterType((*UpdateBasicRequest)(nil), "proxy.UpdateBasicRequest")
	proto.RegisterType((*AddHostGroupClusterRequest)(nil), "proxy.AddHostGroupClusterRequest")
	proto.RegisterType((*UpdateHostGroupClusterRequest)(nil), "proxy.UpdateHostGroupClusterRequest")
	proto.RegisterType((*DeleteHostGroupClusterRequest)(nil), "proxy.DeleteHostGroupClusterRequest")
}

func init() { proto.RegisterFile("proxy.proto", fileDescriptor_700b50b08ed8dbaf) }

var fileDescriptor_700b50b08ed8dbaf = []byte{
	// 931 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x97, 0xd1, 0x6e, 0xe3, 0x44,
	0x14, 0x86, 0xeb, 0xec, 0x66, 0xd3, 0x9c, 0x84, 0x26, 0x3b, 0xd9, 0x4d, 0x43, 0xb4, 0xcd, 0x16,
	0x6b, 0x2f, 0x2a, 0x84, 0x22, 0x94, 0x15, 0x68, 0x85, 0x00, 0x91, 0xb4, 0xab, 0x5d, 0x89, 0x55,
	0x89, 0x1c, 0xda, 0x22, 0x55, 0x42, 0x72, 0xec, 0x49, 0x62, 0x61, 0x67, 0x8c, 0x3d, 0x49, 0x69,
	0x5f, 0x80, 0x1b, 0x1e, 0x80, 0x47, 0xe2, 0x92, 0x47, 0x40, 0xe5, 0x45, 0x90, 0xc7, 0xf6, 0x78,
	0xec, 0x78, 0xac, 0xa6, 0x95, 0xb8, 0x8b, 0x7f, 0xcf, 0xf9, 0xce, 0x99, 0x33, 0x33, 0xfe, 0x27,
	0x50, 0x73, 0x3d, 0xf2, 0xdb, 0x75, 0xdf, 0xf5, 0x08, 0x25, 0xa8, 0xcc, 0x1e, 0xba, 0xb5, 0xa9,
	0xee, 0x5b, 0x46, 0xa8, 0xa9, 0xbf, 0x2b, 0xd0, 0x38, 0xc7, 0x9e, 0x6f, 0x91, 0xa5, 0x86, 0x7d,
	0x97, 0x2c, 0x7d, 0x8c, 0x06, 0x50, 0x65, 0x43, 0x02, 0xa1, 0xa3, 0x1c, 0x2a, 0x47, 0xb5, 0xc1,
	0xb3, 0x7e, 0x18, 0x34, 0x8a, 0xf5, 0x60, 0xa0, 0x96, 0x0c, 0x43, 0x3d, 0x00, 0x63, 0xe5, 0x45,
	0xa4, 0x4e, 0xe9, 0x50, 0x39, 0xaa, 0x6a, 0x82, 0x82, 0x0e, 0xa1, 0x36, 0xd5, 0x8d, 0x5f, 0xe2,
	0x01, 0x8f, 0xd8, 0x00, 0x51, 0x52, 0x3f, 0x87, 0xe6, 0x84, 0x12, 0xf7, 0xc2, 0xb3, 0x28, 0xd6,
	0xf0, 0xaf, 0x2b, 0xec, 0x53, 0xf4, 0x02, 0xaa, 0x0b, 0xe2, 0xd3, 0xb9, 0x47, 0x56, 0x61, 0x25,
	0x55, 0x2d, 0x11, 0xd4, 0xd7, 0xd0, 0xd2, 0xb0, 0x41, 0xd6, 0xd8, 0xdb, 0x22, 0x68, 0x08, 0x4f,
	0xc7, 0x2b, 0x7f, 0x71, 0x4c, 0x96, 0x33, 0x6b, 0x1e, 0x87, 0x20, 0x78, 0x6c, 0xea, 0x54, 0x67,
	0xa3, 0xeb, 0x1a, 0xfb, 0x8d, 0x3a, 0x50, 0x59, 0xa7, 0xa6, 0x13, 0x3f, 0xaa, 0x0e, 0x34, 0xde,
	0x61, 0x7a, 0x4e, 0x82, 0x94, 0x0f, 0x68, 0x19, 0x82, 0xc7, 0x33, 0x8f, 0x38, 0x8c, 0x5e, 0xd6,
	0xd8, 0xef, 0x40, 0x5b, 0x13, 0x8a, 0x59, 0x7f, 0x76, 0x35, 0xf6, 0x5b, 0x1d, 0xc1, 0x1e, 0x4f,
	0x77, 0x87, 0x19, 0xe6, 0x71, 0xd5, 0x4b, 0xd8, 0x9f, 0x5c, 0x59, 0xd4, 0x58, 0x9c, 0xe8, 0x54,
	0xf7, 0xc9, 0xca, 0x33, 0xee, 0x0f, 0x43, 0x7b, 0x50, 0xa2, 0x84, 0x95, 0x58, 0xd6, 0x4a, 0x94,
	0xa8, 0xa7, 0xd0, 0xd9, 0x84, 0xdf, 0xbf, 0x31, 0xea, 0x25, 0xb4, 0x86, 0xa6, 0xf9, 0x9e, 0xf8,
	0xf4, 0x5d, 0x50, 0x43, 0x5c, 0xe8, 0xa7, 0xd0, 0x5c, 0xc4, 0xda, 0xf1, 0x6c, 0x7e, 0x92, 0x2c,
	0xd8, 0x86, 0x5e, 0xb0, 0x78, 0x3f, 0x41, 0xfb, 0x04, 0xdb, 0x98, 0xe2, 0x0d, 0xfe, 0x2b, 0xf8,
	0x88, 0x73, 0x4e, 0x75, 0x07, 0x47, 0xcd, 0x48, 0x8b, 0x05, 0x64, 0x0d, 0x9a, 0x43, 0xd3, 0x9c,
	0x18, 0x0b, 0xec, 0xe8, 0x02, 0xd3, 0x67, 0x42, 0xba, 0xe0, 0xb4, 0x58, 0xc0, 0xfc, 0x01, 0x5a,
	0x61, 0xb5, 0x69, 0x6c, 0x0f, 0x20, 0x24, 0x08, 0x75, 0x0a, 0x4a, 0x01, 0x90, 0x40, 0x63, 0x68,
	0x9a, 0x3f, 0xea, 0x53, 0x9b, 0x6f, 0x00, 0x15, 0xea, 0x34, 0x78, 0x4e, 0x97, 0x98, 0xd2, 0x32,
	0x09, 0x4b, 0x45, 0x09, 0x1f, 0xa5, 0x13, 0xda, 0x80, 0xc2, 0x19, 0xa4, 0x72, 0xbe, 0x80, 0x2a,
	0xe3, 0x0b, 0xf5, 0x27, 0xc2, 0x03, 0xb2, 0xb9, 0xd0, 0x3d, 0x73, 0x4d, 0x9d, 0xf7, 0xeb, 0x62,
	0xe2, 0xda, 0x16, 0xdd, 0xa2, 0x6d, 0xde, 0x15, 0x8b, 0x60, 0x49, 0x77, 0xb5, 0xf8, 0xb1, 0x20,
	0xe3, 0xcf, 0xd0, 0x89, 0x32, 0x52, 0xe2, 0x4e, 0xb0, 0xb7, 0xb6, 0x92, 0xa3, 0x75, 0x04, 0x0d,
	0x3f, 0x51, 0x85, 0xe6, 0x66, 0xe5, 0xe2, 0x1d, 0x10, 0xf1, 0xd9, 0x11, 0x13, 0xa7, 0xc2, 0xcf,
	0x5c, 0x44, 0x15, 0x94, 0x02, 0xe0, 0x07, 0x40, 0x21, 0x30, 0x3a, 0x7f, 0x7c, 0x41, 0xd8, 0x01,
	0x14, 0x70, 0x89, 0x50, 0x40, 0x73, 0xa1, 0x2b, 0x9e, 0xd5, 0x63, 0x7b, 0xe5, 0x53, 0xec, 0xc5,
	0xd4, 0x37, 0xb0, 0xbf, 0xc8, 0xbc, 0x4a, 0xef, 0x32, 0xd9, 0xeb, 0x82, 0x8c, 0x3e, 0x1c, 0x84,
	0xf5, 0xff, 0x9f, 0x49, 0x1d, 0x38, 0xc8, 0x7c, 0x35, 0x32, 0x49, 0x07, 0xf0, 0x2c, 0x4b, 0x15,
	0x36, 0x59, 0xee, 0x3b, 0x79, 0xba, 0xc1, 0x1f, 0x75, 0x28, 0x8f, 0x03, 0xb3, 0x46, 0xdf, 0x02,
	0x24, 0x76, 0x85, 0x3a, 0xfd, 0xd0, 0xcf, 0x37, 0x1c, 0xac, 0x9b, 0xfb, 0x51, 0x55, 0x77, 0xd0,
	0x57, 0x50, 0x89, 0xcc, 0x03, 0x3d, 0x8f, 0x82, 0xd3, 0x66, 0xd2, 0x6d, 0x67, 0x65, 0x1e, 0xfb,
	0x06, 0x2a, 0xb1, 0x7d, 0xb7, 0x22, 0xfc, 0x5b, 0xc7, 0xa5, 0xd7, 0xd9, 0xc8, 0xcc, 0xfd, 0x41,
	0xdd, 0x41, 0x67, 0xd0, 0x4c, 0x1c, 0x61, 0xc2, 0x1c, 0x01, 0xf5, 0xa2, 0xd1, 0x12, 0x1f, 0xea,
	0xbe, 0x94, 0xbe, 0xe7, 0xd8, 0x6f, 0x60, 0x4f, 0x23, 0xb6, 0x1d, 0xdc, 0x1a, 0xa2, 0x86, 0xe4,
	0xd6, 0x25, 0xeb, 0xc5, 0x5b, 0x40, 0xf1, 0x0d, 0xc3, 0x5a, 0xce, 0x87, 0x53, 0xcb, 0xb6, 0xe8,
	0x35, 0xda, 0x8f, 0xf3, 0x66, 0x2e, 0x1f, 0x52, 0xcc, 0xf7, 0xf0, 0x5c, 0xb8, 0x76, 0x08, 0xa4,
	0x6e, 0x44, 0xca, 0xb9, 0x94, 0x48, 0x61, 0x23, 0xa8, 0x8b, 0xe7, 0x87, 0x33, 0x72, 0x0c, 0x50,
	0xca, 0x78, 0x0f, 0x8d, 0xcc, 0xe6, 0x44, 0x07, 0x11, 0x26, 0xdf, 0xea, 0xa4, 0xa4, 0xaf, 0xa1,
	0xca, 0x2d, 0x8c, 0x37, 0x26, 0x6b, 0x6a, 0x45, 0x73, 0x11, 0xcd, 0x8a, 0xcf, 0x25, 0xc7, 0xc1,
	0x0a, 0xf6, 0xeb, 0x6e, 0xec, 0x4f, 0xa8, 0x9d, 0x14, 0x20, 0x9a, 0x87, 0x34, 0xf6, 0x3b, 0xa8,
	0x09, 0x56, 0x83, 0x3e, 0x4e, 0xa5, 0xbf, 0x13, 0x61, 0xcc, 0x3f, 0xb6, 0xa2, 0x7d, 0xa0, 0x4f,
	0x22, 0x92, 0xdc, 0x5a, 0xa4, 0xc4, 0x0f, 0xf0, 0x74, 0xc3, 0x1e, 0xd0, 0xcb, 0x34, 0x6f, 0xc3,
	0x38, 0xa4, 0xb4, 0x2f, 0xa1, 0xa2, 0x61, 0x9f, 0xea, 0x1e, 0xdd, 0x6e, 0xe7, 0x7f, 0x01, 0x4f,
	0x34, 0xec, 0x90, 0x35, 0xde, 0x2e, 0x6c, 0x04, 0x75, 0xd1, 0x7b, 0xf8, 0x82, 0xe6, 0x18, 0x52,
	0xd1, 0xa2, 0x08, 0x76, 0xc3, 0x17, 0x65, 0xd3, 0x82, 0x8a, 0x16, 0x25, 0xc7, 0x62, 0xf8, 0xa2,
	0xc8, 0xed, 0x47, 0x4a, 0x3c, 0x87, 0x76, 0xbe, 0x85, 0xa0, 0x57, 0xa9, 0xf2, 0xee, 0xc1, 0xcd,
	0x77, 0x09, 0xce, 0x2d, 0x34, 0x11, 0x19, 0x77, 0xf4, 0xd9, 0x5f, 0xb7, 0x3d, 0xe5, 0xef, 0xdb,
	0x9e, 0xf2, 0xcf, 0x6d, 0x4f, 0xf9, 0xf3, 0xdf, 0xde, 0x0e, 0x74, 0x0c, 0xe2, 0xf4, 0xe9, 0x15,
	0x31, 0x67, 0x96, 0x87, 0xfb, 0x37, 0xd8, 0x23, 0xe6, 0xb4, 0x7f, 0xe3, 0xba, 0xd3, 0xb1, 0x32,
	0x7d, 0xc2, 0xfe, 0xd9, 0xbd, 0xfe, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x3d, 0x8e, 0x41, 0xa5, 0xfc,
	0x0d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ProxyClient is the client API for Proxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProxyClient interface {
	//推送分库分表配置
	PushConfig(ctx context.Context, in *PushConfigRequest, opts ...grpc.CallOption) (*basic.BasicResponse, error)
	//获取投票
	GetVote(ctx context.Context, in *GetVoteRequest, opts ...grpc.CallOption) (*GetVoteResponse, error)
	//返回ZeroProxy版本
	Version(ctx context.Context, in *basic.EmptyRequest, opts ...grpc.CallOption) (*VersionResponse, error)
	//切换数据源
	SwitchDataSource(ctx context.Context, in *SwitchDatasourceRequest, opts ...grpc.CallOption) (*SwitchDatasourceResponse, error)
	//回滚分库分表配置
	RollbackConfig(ctx context.Context, in *basic.EmptyRequest, opts ...grpc.CallOption) (*basic.BasicResponse, error)
	StopWritingAbility(ctx context.Context, in *StopWriteRequest, opts ...grpc.CallOption) (*basic.BasicResponse, error)
	RecoverWritingAbility(ctx context.Context, in *RecoverWriteRequest, opts ...grpc.CallOption) (*basic.BasicResponse, error)
	AddHostGroup(ctx context.Context, in *AddHostGroupRequest, opts ...grpc.CallOption) (*basic.BasicResponse, error)
	DeleteHostGroup(ctx context.Context, in *DeleteHostGroupRequest, opts ...grpc.CallOption) (*basic.BasicResponse, error)
	AddSchema(ctx context.Context, in *AddSchemaRequest, opts ...grpc.CallOption) (*basic.BasicResponse, error)
	DeleteSchema(ctx context.Context, in *DeleteSchemaRequest, opts ...grpc.CallOption) (*basic.BasicResponse, error)
	AddTable(ctx context.Context, in *AddTableRequest, opts ...grpc.CallOption) (*basic.BasicResponse, error)
	DeleteTable(ctx context.Context, in *DeleteTableRequest, opts ...grpc.CallOption) (*basic.BasicResponse, error)
	UpdateSchemaRWSplit(ctx context.Context, in *UpdateSchemaRWSplitRequest, opts ...grpc.CallOption) (*basic.BasicResponse, error)
	UpdateStopService(ctx context.Context, in *UpdateStopServiceRequest, opts ...grpc.CallOption) (*basic.BasicResponse, error)
	Restart(ctx context.Context, in *basic.EmptyRequest, opts ...grpc.CallOption) (*basic.BasicResponse, error)
	Remove(ctx context.Context, in *basic.EmptyRequest, opts ...grpc.CallOption) (*basic.BasicResponse, error)
	UpdateSwitch(ctx context.Context, in *UpdateSwitchRequest, opts ...grpc.CallOption) (*basic.BasicResponse, error)
	UpdateBasic(ctx context.Context, in *UpdateBasicRequest, opts ...grpc.CallOption) (*basic.BasicResponse, error)
	AddHostGroupCluster(ctx context.Context, in *AddHostGroupClusterRequest, opts ...grpc.CallOption) (*basic.BasicResponse, error)
	UpdateHostGroupCluster(ctx context.Context, in *UpdateHostGroupClusterRequest, opts ...grpc.CallOption) (*basic.BasicResponse, error)
	DeleteHostGroupCluster(ctx context.Context, in *DeleteHostGroupClusterRequest, opts ...grpc.CallOption) (*basic.BasicResponse, error)
}

type proxyClient struct {
	cc *grpc.ClientConn
}

func NewProxyClient(cc *grpc.ClientConn) ProxyClient {
	return &proxyClient{cc}
}

func (c *proxyClient) PushConfig(ctx context.Context, in *PushConfigRequest, opts ...grpc.CallOption) (*basic.BasicResponse, error) {
	out := new(basic.BasicResponse)
	err := c.cc.Invoke(ctx, "/proxy.Proxy/PushConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) GetVote(ctx context.Context, in *GetVoteRequest, opts ...grpc.CallOption) (*GetVoteResponse, error) {
	out := new(GetVoteResponse)
	err := c.cc.Invoke(ctx, "/proxy.Proxy/GetVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) Version(ctx context.Context, in *basic.EmptyRequest, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, "/proxy.Proxy/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) SwitchDataSource(ctx context.Context, in *SwitchDatasourceRequest, opts ...grpc.CallOption) (*SwitchDatasourceResponse, error) {
	out := new(SwitchDatasourceResponse)
	err := c.cc.Invoke(ctx, "/proxy.Proxy/SwitchDataSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) RollbackConfig(ctx context.Context, in *basic.EmptyRequest, opts ...grpc.CallOption) (*basic.BasicResponse, error) {
	out := new(basic.BasicResponse)
	err := c.cc.Invoke(ctx, "/proxy.Proxy/RollbackConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) StopWritingAbility(ctx context.Context, in *StopWriteRequest, opts ...grpc.CallOption) (*basic.BasicResponse, error) {
	out := new(basic.BasicResponse)
	err := c.cc.Invoke(ctx, "/proxy.Proxy/StopWritingAbility", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) RecoverWritingAbility(ctx context.Context, in *RecoverWriteRequest, opts ...grpc.CallOption) (*basic.BasicResponse, error) {
	out := new(basic.BasicResponse)
	err := c.cc.Invoke(ctx, "/proxy.Proxy/RecoverWritingAbility", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) AddHostGroup(ctx context.Context, in *AddHostGroupRequest, opts ...grpc.CallOption) (*basic.BasicResponse, error) {
	out := new(basic.BasicResponse)
	err := c.cc.Invoke(ctx, "/proxy.Proxy/AddHostGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) DeleteHostGroup(ctx context.Context, in *DeleteHostGroupRequest, opts ...grpc.CallOption) (*basic.BasicResponse, error) {
	out := new(basic.BasicResponse)
	err := c.cc.Invoke(ctx, "/proxy.Proxy/DeleteHostGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) AddSchema(ctx context.Context, in *AddSchemaRequest, opts ...grpc.CallOption) (*basic.BasicResponse, error) {
	out := new(basic.BasicResponse)
	err := c.cc.Invoke(ctx, "/proxy.Proxy/AddSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) DeleteSchema(ctx context.Context, in *DeleteSchemaRequest, opts ...grpc.CallOption) (*basic.BasicResponse, error) {
	out := new(basic.BasicResponse)
	err := c.cc.Invoke(ctx, "/proxy.Proxy/DeleteSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) AddTable(ctx context.Context, in *AddTableRequest, opts ...grpc.CallOption) (*basic.BasicResponse, error) {
	out := new(basic.BasicResponse)
	err := c.cc.Invoke(ctx, "/proxy.Proxy/AddTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) DeleteTable(ctx context.Context, in *DeleteTableRequest, opts ...grpc.CallOption) (*basic.BasicResponse, error) {
	out := new(basic.BasicResponse)
	err := c.cc.Invoke(ctx, "/proxy.Proxy/DeleteTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) UpdateSchemaRWSplit(ctx context.Context, in *UpdateSchemaRWSplitRequest, opts ...grpc.CallOption) (*basic.BasicResponse, error) {
	out := new(basic.BasicResponse)
	err := c.cc.Invoke(ctx, "/proxy.Proxy/UpdateSchemaRWSplit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) UpdateStopService(ctx context.Context, in *UpdateStopServiceRequest, opts ...grpc.CallOption) (*basic.BasicResponse, error) {
	out := new(basic.BasicResponse)
	err := c.cc.Invoke(ctx, "/proxy.Proxy/UpdateStopService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) Restart(ctx context.Context, in *basic.EmptyRequest, opts ...grpc.CallOption) (*basic.BasicResponse, error) {
	out := new(basic.BasicResponse)
	err := c.cc.Invoke(ctx, "/proxy.Proxy/Restart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) Remove(ctx context.Context, in *basic.EmptyRequest, opts ...grpc.CallOption) (*basic.BasicResponse, error) {
	out := new(basic.BasicResponse)
	err := c.cc.Invoke(ctx, "/proxy.Proxy/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) UpdateSwitch(ctx context.Context, in *UpdateSwitchRequest, opts ...grpc.CallOption) (*basic.BasicResponse, error) {
	out := new(basic.BasicResponse)
	err := c.cc.Invoke(ctx, "/proxy.Proxy/UpdateSwitch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) UpdateBasic(ctx context.Context, in *UpdateBasicRequest, opts ...grpc.CallOption) (*basic.BasicResponse, error) {
	out := new(basic.BasicResponse)
	err := c.cc.Invoke(ctx, "/proxy.Proxy/UpdateBasic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) AddHostGroupCluster(ctx context.Context, in *AddHostGroupClusterRequest, opts ...grpc.CallOption) (*basic.BasicResponse, error) {
	out := new(basic.BasicResponse)
	err := c.cc.Invoke(ctx, "/proxy.Proxy/AddHostGroupCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) UpdateHostGroupCluster(ctx context.Context, in *UpdateHostGroupClusterRequest, opts ...grpc.CallOption) (*basic.BasicResponse, error) {
	out := new(basic.BasicResponse)
	err := c.cc.Invoke(ctx, "/proxy.Proxy/UpdateHostGroupCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) DeleteHostGroupCluster(ctx context.Context, in *DeleteHostGroupClusterRequest, opts ...grpc.CallOption) (*basic.BasicResponse, error) {
	out := new(basic.BasicResponse)
	err := c.cc.Invoke(ctx, "/proxy.Proxy/DeleteHostGroupCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProxyServer is the server API for Proxy service.
type ProxyServer interface {
	//推送分库分表配置
	PushConfig(context.Context, *PushConfigRequest) (*basic.BasicResponse, error)
	//获取投票
	GetVote(context.Context, *GetVoteRequest) (*GetVoteResponse, error)
	//返回ZeroProxy版本
	Version(context.Context, *basic.EmptyRequest) (*VersionResponse, error)
	//切换数据源
	SwitchDataSource(context.Context, *SwitchDatasourceRequest) (*SwitchDatasourceResponse, error)
	//回滚分库分表配置
	RollbackConfig(context.Context, *basic.EmptyRequest) (*basic.BasicResponse, error)
	StopWritingAbility(context.Context, *StopWriteRequest) (*basic.BasicResponse, error)
	RecoverWritingAbility(context.Context, *RecoverWriteRequest) (*basic.BasicResponse, error)
	AddHostGroup(context.Context, *AddHostGroupRequest) (*basic.BasicResponse, error)
	DeleteHostGroup(context.Context, *DeleteHostGroupRequest) (*basic.BasicResponse, error)
	AddSchema(context.Context, *AddSchemaRequest) (*basic.BasicResponse, error)
	DeleteSchema(context.Context, *DeleteSchemaRequest) (*basic.BasicResponse, error)
	AddTable(context.Context, *AddTableRequest) (*basic.BasicResponse, error)
	DeleteTable(context.Context, *DeleteTableRequest) (*basic.BasicResponse, error)
	UpdateSchemaRWSplit(context.Context, *UpdateSchemaRWSplitRequest) (*basic.BasicResponse, error)
	UpdateStopService(context.Context, *UpdateStopServiceRequest) (*basic.BasicResponse, error)
	Restart(context.Context, *basic.EmptyRequest) (*basic.BasicResponse, error)
	Remove(context.Context, *basic.EmptyRequest) (*basic.BasicResponse, error)
	UpdateSwitch(context.Context, *UpdateSwitchRequest) (*basic.BasicResponse, error)
	UpdateBasic(context.Context, *UpdateBasicRequest) (*basic.BasicResponse, error)
	AddHostGroupCluster(context.Context, *AddHostGroupClusterRequest) (*basic.BasicResponse, error)
	UpdateHostGroupCluster(context.Context, *UpdateHostGroupClusterRequest) (*basic.BasicResponse, error)
	DeleteHostGroupCluster(context.Context, *DeleteHostGroupClusterRequest) (*basic.BasicResponse, error)
}

// UnimplementedProxyServer can be embedded to have forward compatible implementations.
type UnimplementedProxyServer struct {
}

func (*UnimplementedProxyServer) PushConfig(ctx context.Context, req *PushConfigRequest) (*basic.BasicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushConfig not implemented")
}
func (*UnimplementedProxyServer) GetVote(ctx context.Context, req *GetVoteRequest) (*GetVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVote not implemented")
}
func (*UnimplementedProxyServer) Version(ctx context.Context, req *basic.EmptyRequest) (*VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (*UnimplementedProxyServer) SwitchDataSource(ctx context.Context, req *SwitchDatasourceRequest) (*SwitchDatasourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwitchDataSource not implemented")
}
func (*UnimplementedProxyServer) RollbackConfig(ctx context.Context, req *basic.EmptyRequest) (*basic.BasicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollbackConfig not implemented")
}
func (*UnimplementedProxyServer) StopWritingAbility(ctx context.Context, req *StopWriteRequest) (*basic.BasicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopWritingAbility not implemented")
}
func (*UnimplementedProxyServer) RecoverWritingAbility(ctx context.Context, req *RecoverWriteRequest) (*basic.BasicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecoverWritingAbility not implemented")
}
func (*UnimplementedProxyServer) AddHostGroup(ctx context.Context, req *AddHostGroupRequest) (*basic.BasicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddHostGroup not implemented")
}
func (*UnimplementedProxyServer) DeleteHostGroup(ctx context.Context, req *DeleteHostGroupRequest) (*basic.BasicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHostGroup not implemented")
}
func (*UnimplementedProxyServer) AddSchema(ctx context.Context, req *AddSchemaRequest) (*basic.BasicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSchema not implemented")
}
func (*UnimplementedProxyServer) DeleteSchema(ctx context.Context, req *DeleteSchemaRequest) (*basic.BasicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSchema not implemented")
}
func (*UnimplementedProxyServer) AddTable(ctx context.Context, req *AddTableRequest) (*basic.BasicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTable not implemented")
}
func (*UnimplementedProxyServer) DeleteTable(ctx context.Context, req *DeleteTableRequest) (*basic.BasicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTable not implemented")
}
func (*UnimplementedProxyServer) UpdateSchemaRWSplit(ctx context.Context, req *UpdateSchemaRWSplitRequest) (*basic.BasicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSchemaRWSplit not implemented")
}
func (*UnimplementedProxyServer) UpdateStopService(ctx context.Context, req *UpdateStopServiceRequest) (*basic.BasicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStopService not implemented")
}
func (*UnimplementedProxyServer) Restart(ctx context.Context, req *basic.EmptyRequest) (*basic.BasicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restart not implemented")
}
func (*UnimplementedProxyServer) Remove(ctx context.Context, req *basic.EmptyRequest) (*basic.BasicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (*UnimplementedProxyServer) UpdateSwitch(ctx context.Context, req *UpdateSwitchRequest) (*basic.BasicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSwitch not implemented")
}
func (*UnimplementedProxyServer) UpdateBasic(ctx context.Context, req *UpdateBasicRequest) (*basic.BasicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBasic not implemented")
}
func (*UnimplementedProxyServer) AddHostGroupCluster(ctx context.Context, req *AddHostGroupClusterRequest) (*basic.BasicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddHostGroupCluster not implemented")
}
func (*UnimplementedProxyServer) UpdateHostGroupCluster(ctx context.Context, req *UpdateHostGroupClusterRequest) (*basic.BasicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHostGroupCluster not implemented")
}
func (*UnimplementedProxyServer) DeleteHostGroupCluster(ctx context.Context, req *DeleteHostGroupClusterRequest) (*basic.BasicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHostGroupCluster not implemented")
}

func RegisterProxyServer(s *grpc.Server, srv ProxyServer) {
	s.RegisterService(&_Proxy_serviceDesc, srv)
}

func _Proxy_PushConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).PushConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.Proxy/PushConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).PushConfig(ctx, req.(*PushConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_GetVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).GetVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.Proxy/GetVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).GetVote(ctx, req.(*GetVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(basic.EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.Proxy/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).Version(ctx, req.(*basic.EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_SwitchDataSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwitchDatasourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).SwitchDataSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.Proxy/SwitchDataSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).SwitchDataSource(ctx, req.(*SwitchDatasourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_RollbackConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(basic.EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).RollbackConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.Proxy/RollbackConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).RollbackConfig(ctx, req.(*basic.EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_StopWritingAbility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopWriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).StopWritingAbility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.Proxy/StopWritingAbility",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).StopWritingAbility(ctx, req.(*StopWriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_RecoverWritingAbility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecoverWriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).RecoverWritingAbility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.Proxy/RecoverWritingAbility",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).RecoverWritingAbility(ctx, req.(*RecoverWriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_AddHostGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddHostGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).AddHostGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.Proxy/AddHostGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).AddHostGroup(ctx, req.(*AddHostGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_DeleteHostGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHostGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).DeleteHostGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.Proxy/DeleteHostGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).DeleteHostGroup(ctx, req.(*DeleteHostGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_AddSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).AddSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.Proxy/AddSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).AddSchema(ctx, req.(*AddSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_DeleteSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).DeleteSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.Proxy/DeleteSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).DeleteSchema(ctx, req.(*DeleteSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_AddTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).AddTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.Proxy/AddTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).AddTable(ctx, req.(*AddTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_DeleteTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).DeleteTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.Proxy/DeleteTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).DeleteTable(ctx, req.(*DeleteTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_UpdateSchemaRWSplit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSchemaRWSplitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).UpdateSchemaRWSplit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.Proxy/UpdateSchemaRWSplit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).UpdateSchemaRWSplit(ctx, req.(*UpdateSchemaRWSplitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_UpdateStopService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStopServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).UpdateStopService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.Proxy/UpdateStopService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).UpdateStopService(ctx, req.(*UpdateStopServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_Restart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(basic.EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).Restart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.Proxy/Restart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).Restart(ctx, req.(*basic.EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(basic.EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.Proxy/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).Remove(ctx, req.(*basic.EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_UpdateSwitch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSwitchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).UpdateSwitch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.Proxy/UpdateSwitch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).UpdateSwitch(ctx, req.(*UpdateSwitchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_UpdateBasic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBasicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).UpdateBasic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.Proxy/UpdateBasic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).UpdateBasic(ctx, req.(*UpdateBasicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_AddHostGroupCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddHostGroupClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).AddHostGroupCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.Proxy/AddHostGroupCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).AddHostGroupCluster(ctx, req.(*AddHostGroupClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_UpdateHostGroupCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHostGroupClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).UpdateHostGroupCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.Proxy/UpdateHostGroupCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).UpdateHostGroupCluster(ctx, req.(*UpdateHostGroupClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_DeleteHostGroupCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHostGroupClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).DeleteHostGroupCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.Proxy/DeleteHostGroupCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).DeleteHostGroupCluster(ctx, req.(*DeleteHostGroupClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Proxy_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proxy.Proxy",
	HandlerType: (*ProxyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PushConfig",
			Handler:    _Proxy_PushConfig_Handler,
		},
		{
			MethodName: "GetVote",
			Handler:    _Proxy_GetVote_Handler,
		},
		{
			MethodName: "Version",
			Handler:    _Proxy_Version_Handler,
		},
		{
			MethodName: "SwitchDataSource",
			Handler:    _Proxy_SwitchDataSource_Handler,
		},
		{
			MethodName: "RollbackConfig",
			Handler:    _Proxy_RollbackConfig_Handler,
		},
		{
			MethodName: "StopWritingAbility",
			Handler:    _Proxy_StopWritingAbility_Handler,
		},
		{
			MethodName: "RecoverWritingAbility",
			Handler:    _Proxy_RecoverWritingAbility_Handler,
		},
		{
			MethodName: "AddHostGroup",
			Handler:    _Proxy_AddHostGroup_Handler,
		},
		{
			MethodName: "DeleteHostGroup",
			Handler:    _Proxy_DeleteHostGroup_Handler,
		},
		{
			MethodName: "AddSchema",
			Handler:    _Proxy_AddSchema_Handler,
		},
		{
			MethodName: "DeleteSchema",
			Handler:    _Proxy_DeleteSchema_Handler,
		},
		{
			MethodName: "AddTable",
			Handler:    _Proxy_AddTable_Handler,
		},
		{
			MethodName: "DeleteTable",
			Handler:    _Proxy_DeleteTable_Handler,
		},
		{
			MethodName: "UpdateSchemaRWSplit",
			Handler:    _Proxy_UpdateSchemaRWSplit_Handler,
		},
		{
			MethodName: "UpdateStopService",
			Handler:    _Proxy_UpdateStopService_Handler,
		},
		{
			MethodName: "Restart",
			Handler:    _Proxy_Restart_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _Proxy_Remove_Handler,
		},
		{
			MethodName: "UpdateSwitch",
			Handler:    _Proxy_UpdateSwitch_Handler,
		},
		{
			MethodName: "UpdateBasic",
			Handler:    _Proxy_UpdateBasic_Handler,
		},
		{
			MethodName: "AddHostGroupCluster",
			Handler:    _Proxy_AddHostGroupCluster_Handler,
		},
		{
			MethodName: "UpdateHostGroupCluster",
			Handler:    _Proxy_UpdateHostGroupCluster_Handler,
		},
		{
			MethodName: "DeleteHostGroupCluster",
			Handler:    _Proxy_DeleteHostGroupCluster_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proxy.proto",
}

func (m *VersionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VersionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VersionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.BackVersion) > 0 {
		i -= len(m.BackVersion)
		copy(dAtA[i:], m.BackVersion)
		i = encodeVarintProxy(dAtA, i, uint64(len(m.BackVersion)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CurVersion) > 0 {
		i -= len(m.CurVersion)
		copy(dAtA[i:], m.CurVersion)
		i = encodeVarintProxy(dAtA, i, uint64(len(m.CurVersion)))
		i--
		dAtA[i] = 0x12
	}
	if m.BasicResp != nil {
		{
			size, err := m.BasicResp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProxy(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StopWriteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StopWriteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StopWriteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Hostgroup) > 0 {
		i -= len(m.Hostgroup)
		copy(dAtA[i:], m.Hostgroup)
		i = encodeVarintProxy(dAtA, i, uint64(len(m.Hostgroup)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RecoverWriteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecoverWriteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecoverWriteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Hostgroup) > 0 {
		i -= len(m.Hostgroup)
		copy(dAtA[i:], m.Hostgroup)
		i = encodeVarintProxy(dAtA, i, uint64(len(m.Hostgroup)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PushConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushConfigRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintProxy(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintProxy(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetVoteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetVoteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetVoteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Vote {
		i--
		if m.Vote {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.From != 0 {
		i = encodeVarintProxy(dAtA, i, uint64(m.From))
		i--
		dAtA[i] = 0x10
	}
	if m.BasicResp != nil {
		{
			size, err := m.BasicResp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProxy(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetVoteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetVoteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetVoteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.From != 0 {
		i = encodeVarintProxy(dAtA, i, uint64(m.From))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Hostgroup) > 0 {
		i -= len(m.Hostgroup)
		copy(dAtA[i:], m.Hostgroup)
		i = encodeVarintProxy(dAtA, i, uint64(len(m.Hostgroup)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SwitchDatasourceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SwitchDatasourceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SwitchDatasourceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.To != 0 {
		i = encodeVarintProxy(dAtA, i, uint64(m.To))
		i--
		dAtA[i] = 0x18
	}
	if m.From != 0 {
		i = encodeVarintProxy(dAtA, i, uint64(m.From))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Hostgroup) > 0 {
		i -= len(m.Hostgroup)
		copy(dAtA[i:], m.Hostgroup)
		i = encodeVarintProxy(dAtA, i, uint64(len(m.Hostgroup)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SwitchDatasourceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SwitchDatasourceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SwitchDatasourceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BasicResp != nil {
		{
			size, err := m.BasicResp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProxy(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddHostGroupRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddHostGroupRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddHostGroupRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintProxy(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.HostGroupCfgData) > 0 {
		i -= len(m.HostGroupCfgData)
		copy(dAtA[i:], m.HostGroupCfgData)
		i = encodeVarintProxy(dAtA, i, uint64(len(m.HostGroupCfgData)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteHostGroupRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteHostGroupRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteHostGroupRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintProxy(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.HostGroupName) > 0 {
		i -= len(m.HostGroupName)
		copy(dAtA[i:], m.HostGroupName)
		i = encodeVarintProxy(dAtA, i, uint64(len(m.HostGroupName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddSchemaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddSchemaRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddSchemaRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintProxy(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SchemaCfgData) > 0 {
		i -= len(m.SchemaCfgData)
		copy(dAtA[i:], m.SchemaCfgData)
		i = encodeVarintProxy(dAtA, i, uint64(len(m.SchemaCfgData)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteSchemaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteSchemaRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteSchemaRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintProxy(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SchemaName) > 0 {
		i -= len(m.SchemaName)
		copy(dAtA[i:], m.SchemaName)
		i = encodeVarintProxy(dAtA, i, uint64(len(m.SchemaName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddTableRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddTableRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddTableRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintProxy(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SchemaName) > 0 {
		i -= len(m.SchemaName)
		copy(dAtA[i:], m.SchemaName)
		i = encodeVarintProxy(dAtA, i, uint64(len(m.SchemaName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TableCfgData) > 0 {
		i -= len(m.TableCfgData)
		copy(dAtA[i:], m.TableCfgData)
		i = encodeVarintProxy(dAtA, i, uint64(len(m.TableCfgData)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteTableRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteTableRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteTableRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintProxy(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SchemaName) > 0 {
		i -= len(m.SchemaName)
		copy(dAtA[i:], m.SchemaName)
		i = encodeVarintProxy(dAtA, i, uint64(len(m.SchemaName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TableName) > 0 {
		i -= len(m.TableName)
		copy(dAtA[i:], m.TableName)
		i = encodeVarintProxy(dAtA, i, uint64(len(m.TableName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateSchemaRWSplitRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateSchemaRWSplitRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSchemaRWSplitRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintProxy(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x1a
	}
	if m.RwSplit {
		i--
		if m.RwSplit {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.SchemaName) > 0 {
		i -= len(m.SchemaName)
		copy(dAtA[i:], m.SchemaName)
		i = encodeVarintProxy(dAtA, i, uint64(len(m.SchemaName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateStopServiceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateStopServiceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateStopServiceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintProxy(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StopServiceData) > 0 {
		i -= len(m.StopServiceData)
		copy(dAtA[i:], m.StopServiceData)
		i = encodeVarintProxy(dAtA, i, uint64(len(m.StopServiceData)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateSwitchRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateSwitchRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSwitchRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintProxy(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SwitchData) > 0 {
		i -= len(m.SwitchData)
		copy(dAtA[i:], m.SwitchData)
		i = encodeVarintProxy(dAtA, i, uint64(len(m.SwitchData)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateBasicRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateBasicRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateBasicRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintProxy(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BasicData) > 0 {
		i -= len(m.BasicData)
		copy(dAtA[i:], m.BasicData)
		i = encodeVarintProxy(dAtA, i, uint64(len(m.BasicData)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddHostGroupClusterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddHostGroupClusterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddHostGroupClusterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintProxy(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.HostGroupClusterCfgData) > 0 {
		i -= len(m.HostGroupClusterCfgData)
		copy(dAtA[i:], m.HostGroupClusterCfgData)
		i = encodeVarintProxy(dAtA, i, uint64(len(m.HostGroupClusterCfgData)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateHostGroupClusterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateHostGroupClusterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateHostGroupClusterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintProxy(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.HostGroupClusterCfgData) > 0 {
		i -= len(m.HostGroupClusterCfgData)
		copy(dAtA[i:], m.HostGroupClusterCfgData)
		i = encodeVarintProxy(dAtA, i, uint64(len(m.HostGroupClusterCfgData)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteHostGroupClusterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteHostGroupClusterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteHostGroupClusterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintProxy(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.HostGroupClusterName) > 0 {
		i -= len(m.HostGroupClusterName)
		copy(dAtA[i:], m.HostGroupClusterName)
		i = encodeVarintProxy(dAtA, i, uint64(len(m.HostGroupClusterName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintProxy(dAtA []byte, offset int, v uint64) int {
	offset -= sovProxy(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *VersionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BasicResp != nil {
		l = m.BasicResp.Size()
		n += 1 + l + sovProxy(uint64(l))
	}
	l = len(m.CurVersion)
	if l > 0 {
		n += 1 + l + sovProxy(uint64(l))
	}
	l = len(m.BackVersion)
	if l > 0 {
		n += 1 + l + sovProxy(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StopWriteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hostgroup)
	if l > 0 {
		n += 1 + l + sovProxy(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RecoverWriteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hostgroup)
	if l > 0 {
		n += 1 + l + sovProxy(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PushConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovProxy(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovProxy(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetVoteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BasicResp != nil {
		l = m.BasicResp.Size()
		n += 1 + l + sovProxy(uint64(l))
	}
	if m.From != 0 {
		n += 1 + sovProxy(uint64(m.From))
	}
	if m.Vote {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetVoteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hostgroup)
	if l > 0 {
		n += 1 + l + sovProxy(uint64(l))
	}
	if m.From != 0 {
		n += 1 + sovProxy(uint64(m.From))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SwitchDatasourceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hostgroup)
	if l > 0 {
		n += 1 + l + sovProxy(uint64(l))
	}
	if m.From != 0 {
		n += 1 + sovProxy(uint64(m.From))
	}
	if m.To != 0 {
		n += 1 + sovProxy(uint64(m.To))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SwitchDatasourceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BasicResp != nil {
		l = m.BasicResp.Size()
		n += 1 + l + sovProxy(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddHostGroupRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.HostGroupCfgData)
	if l > 0 {
		n += 1 + l + sovProxy(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovProxy(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteHostGroupRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.HostGroupName)
	if l > 0 {
		n += 1 + l + sovProxy(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovProxy(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddSchemaRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SchemaCfgData)
	if l > 0 {
		n += 1 + l + sovProxy(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovProxy(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteSchemaRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SchemaName)
	if l > 0 {
		n += 1 + l + sovProxy(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovProxy(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddTableRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TableCfgData)
	if l > 0 {
		n += 1 + l + sovProxy(uint64(l))
	}
	l = len(m.SchemaName)
	if l > 0 {
		n += 1 + l + sovProxy(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovProxy(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteTableRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TableName)
	if l > 0 {
		n += 1 + l + sovProxy(uint64(l))
	}
	l = len(m.SchemaName)
	if l > 0 {
		n += 1 + l + sovProxy(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovProxy(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateSchemaRWSplitRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SchemaName)
	if l > 0 {
		n += 1 + l + sovProxy(uint64(l))
	}
	if m.RwSplit {
		n += 2
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovProxy(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateStopServiceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StopServiceData)
	if l > 0 {
		n += 1 + l + sovProxy(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovProxy(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateSwitchRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SwitchData)
	if l > 0 {
		n += 1 + l + sovProxy(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovProxy(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateBasicRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BasicData)
	if l > 0 {
		n += 1 + l + sovProxy(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovProxy(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddHostGroupClusterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.HostGroupClusterCfgData)
	if l > 0 {
		n += 1 + l + sovProxy(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovProxy(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateHostGroupClusterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.HostGroupClusterCfgData)
	if l > 0 {
		n += 1 + l + sovProxy(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovProxy(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteHostGroupClusterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.HostGroupClusterName)
	if l > 0 {
		n += 1 + l + sovProxy(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovProxy(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovProxy(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProxy(x uint64) (n int) {
	return sovProxy(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VersionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VersionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VersionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BasicResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProxy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BasicResp == nil {
				m.BasicResp = &basic.BasicResponse{}
			}
			if err := m.BasicResp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProxy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProxy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BackVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StopWriteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StopWriteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StopWriteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostgroup", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProxy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hostgroup = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecoverWriteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecoverWriteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecoverWriteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostgroup", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProxy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hostgroup = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProxy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProxy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetVoteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetVoteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetVoteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BasicResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProxy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BasicResp == nil {
				m.BasicResp = &basic.BasicResponse{}
			}
			if err := m.BasicResp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			m.From = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.From |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vote", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Vote = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipProxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetVoteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetVoteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetVoteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostgroup", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProxy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hostgroup = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			m.From = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.From |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SwitchDatasourceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SwitchDatasourceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SwitchDatasourceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostgroup", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProxy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hostgroup = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			m.From = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.From |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			m.To = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.To |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SwitchDatasourceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SwitchDatasourceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SwitchDatasourceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BasicResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProxy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BasicResp == nil {
				m.BasicResp = &basic.BasicResponse{}
			}
			if err := m.BasicResp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddHostGroupRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddHostGroupRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddHostGroupRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostGroupCfgData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProxy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostGroupCfgData = append(m.HostGroupCfgData[:0], dAtA[iNdEx:postIndex]...)
			if m.HostGroupCfgData == nil {
				m.HostGroupCfgData = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProxy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteHostGroupRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteHostGroupRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteHostGroupRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostGroupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProxy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostGroupName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProxy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddSchemaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddSchemaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddSchemaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaCfgData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProxy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SchemaCfgData = append(m.SchemaCfgData[:0], dAtA[iNdEx:postIndex]...)
			if m.SchemaCfgData == nil {
				m.SchemaCfgData = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProxy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteSchemaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteSchemaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteSchemaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProxy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SchemaName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProxy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddTableRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddTableRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddTableRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableCfgData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProxy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TableCfgData = append(m.TableCfgData[:0], dAtA[iNdEx:postIndex]...)
			if m.TableCfgData == nil {
				m.TableCfgData = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProxy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SchemaName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProxy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteTableRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteTableRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteTableRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProxy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TableName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProxy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SchemaName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProxy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateSchemaRWSplitRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateSchemaRWSplitRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateSchemaRWSplitRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProxy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SchemaName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RwSplit", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RwSplit = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProxy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateStopServiceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateStopServiceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateStopServiceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StopServiceData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProxy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StopServiceData = append(m.StopServiceData[:0], dAtA[iNdEx:postIndex]...)
			if m.StopServiceData == nil {
				m.StopServiceData = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProxy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateSwitchRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateSwitchRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateSwitchRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwitchData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProxy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SwitchData = append(m.SwitchData[:0], dAtA[iNdEx:postIndex]...)
			if m.SwitchData == nil {
				m.SwitchData = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProxy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateBasicRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateBasicRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateBasicRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BasicData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProxy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BasicData = append(m.BasicData[:0], dAtA[iNdEx:postIndex]...)
			if m.BasicData == nil {
				m.BasicData = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProxy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddHostGroupClusterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddHostGroupClusterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddHostGroupClusterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostGroupClusterCfgData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProxy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostGroupClusterCfgData = append(m.HostGroupClusterCfgData[:0], dAtA[iNdEx:postIndex]...)
			if m.HostGroupClusterCfgData == nil {
				m.HostGroupClusterCfgData = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProxy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateHostGroupClusterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateHostGroupClusterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateHostGroupClusterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostGroupClusterCfgData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProxy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostGroupClusterCfgData = append(m.HostGroupClusterCfgData[:0], dAtA[iNdEx:postIndex]...)
			if m.HostGroupClusterCfgData == nil {
				m.HostGroupClusterCfgData = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProxy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteHostGroupClusterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteHostGroupClusterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteHostGroupClusterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostGroupClusterName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProxy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostGroupClusterName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProxy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProxy(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProxy
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProxy
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthProxy
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowProxy
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipProxy(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthProxy
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthProxy = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProxy   = fmt.Errorf("proto: integer overflow")
)
